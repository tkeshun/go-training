// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeTodosFilterGetResponse(resp *http.Response) (res TodosFilterGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TodosFilterGetOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &TodosFilterGetBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosGetResponse(resp *http.Response) (res []TodosGetOKItem, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response []TodosGetOKItem
			if err := func() error {
				response = make([]TodosGetOKItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TodosGetOKItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					response = append(response, elem)
					return nil
				}); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if response == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDCompletePostResponse(resp *http.Response) (res TodosIDCompletePostRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &TodosIDCompletePostOK{}, nil
	case 404:
		// Code 404.
		return &TodosIDCompletePostNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDDeleteResponse(resp *http.Response) (res TodosIDDeleteRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &TodosIDDeleteNoContent{}, nil
	case 404:
		// Code 404.
		return &TodosIDDeleteNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDGetResponse(resp *http.Response) (res TodosIDGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TodosIDGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 404:
		// Code 404.
		return &TodosIDGetNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDPatchResponse(resp *http.Response) (res TodosIDPatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &TodosIDPatchOK{}, nil
	case 404:
		// Code 404.
		return &TodosIDPatchNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDPriorityPatchResponse(resp *http.Response) (res TodosIDPriorityPatchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &TodosIDPriorityPatchOK{}, nil
	case 404:
		// Code 404.
		return &TodosIDPriorityPatchNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDReopenPostResponse(resp *http.Response) (res TodosIDReopenPostRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &TodosIDReopenPostOK{}, nil
	case 404:
		// Code 404.
		return &TodosIDReopenPostNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDTagsDeleteResponse(resp *http.Response) (res TodosIDTagsDeleteRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &TodosIDTagsDeleteNoContent{}, nil
	case 404:
		// Code 404.
		return &TodosIDTagsDeleteNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosIDTagsPostResponse(resp *http.Response) (res TodosIDTagsPostRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &TodosIDTagsPostOK{}, nil
	case 404:
		// Code 404.
		return &TodosIDTagsPostNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeTodosPostResponse(resp *http.Response) (res TodosPostRes, _ error) {
	switch resp.StatusCode {
	case 201:
		// Code 201.
		return &TodosPostCreated{}, nil
	case 400:
		// Code 400.
		return &TodosPostBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeUsersIDDeleteResponse(resp *http.Response) (res UsersIDDeleteRes, _ error) {
	switch resp.StatusCode {
	case 204:
		// Code 204.
		return &UsersIDDeleteNoContent{}, nil
	case 404:
		// Code 404.
		return &UsersIDDeleteNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeUsersIDGetResponse(resp *http.Response) (res UsersIDGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response UsersIDGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 404:
		// Code 404.
		return &UsersIDGetNotFound{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeUsersPostResponse(resp *http.Response) (res UsersPostRes, _ error) {
	switch resp.StatusCode {
	case 201:
		// Code 201.
		return &UsersPostCreated{}, nil
	case 400:
		// Code 400.
		return &UsersPostBadRequest{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
