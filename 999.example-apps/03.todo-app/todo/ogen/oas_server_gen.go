// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// TodosFilterGet implements GET /todos/filter operation.
	//
	// Filter TODOs based on specific conditions.
	//
	// GET /todos/filter
	TodosFilterGet(ctx context.Context, params TodosFilterGetParams) (TodosFilterGetRes, error)
	// TodosGet implements GET /todos operation.
	//
	// Get a list of all TODOs.
	//
	// GET /todos
	TodosGet(ctx context.Context) ([]TodosGetOKItem, error)
	// TodosIDCompletePost implements POST /todos/{id}/complete operation.
	//
	// Mark a TODO as completed.
	//
	// POST /todos/{id}/complete
	TodosIDCompletePost(ctx context.Context, params TodosIDCompletePostParams) (TodosIDCompletePostRes, error)
	// TodosIDDelete implements DELETE /todos/{id} operation.
	//
	// Delete a TODO.
	//
	// DELETE /todos/{id}
	TodosIDDelete(ctx context.Context, params TodosIDDeleteParams) (TodosIDDeleteRes, error)
	// TodosIDGet implements GET /todos/{id} operation.
	//
	// Get TODO details by ID.
	//
	// GET /todos/{id}
	TodosIDGet(ctx context.Context, params TodosIDGetParams) (TodosIDGetRes, error)
	// TodosIDPatch implements PATCH /todos/{id} operation.
	//
	// Update a TODO.
	//
	// PATCH /todos/{id}
	TodosIDPatch(ctx context.Context, req *TodosIDPatchReq, params TodosIDPatchParams) (TodosIDPatchRes, error)
	// TodosIDPriorityPatch implements PATCH /todos/{id}/priority operation.
	//
	// Change the priority of a TODO.
	//
	// PATCH /todos/{id}/priority
	TodosIDPriorityPatch(ctx context.Context, req *TodosIDPriorityPatchReq, params TodosIDPriorityPatchParams) (TodosIDPriorityPatchRes, error)
	// TodosIDReopenPost implements POST /todos/{id}/reopen operation.
	//
	// Reopen a completed TODO.
	//
	// POST /todos/{id}/reopen
	TodosIDReopenPost(ctx context.Context, params TodosIDReopenPostParams) (TodosIDReopenPostRes, error)
	// TodosIDTagsDelete implements DELETE /todos/{id}/tags operation.
	//
	// Remove a tag from a TODO.
	//
	// DELETE /todos/{id}/tags
	TodosIDTagsDelete(ctx context.Context, params TodosIDTagsDeleteParams) (TodosIDTagsDeleteRes, error)
	// TodosIDTagsPost implements POST /todos/{id}/tags operation.
	//
	// Add a tag to a TODO.
	//
	// POST /todos/{id}/tags
	TodosIDTagsPost(ctx context.Context, req *TodosIDTagsPostReq, params TodosIDTagsPostParams) (TodosIDTagsPostRes, error)
	// TodosPost implements POST /todos operation.
	//
	// Create a new TODO.
	//
	// POST /todos
	TodosPost(ctx context.Context, req *TodosPostReq) (TodosPostRes, error)
	// UsersIDDelete implements DELETE /users/{id} operation.
	//
	// Delete a user and all related data.
	//
	// DELETE /users/{id}
	UsersIDDelete(ctx context.Context, params UsersIDDeleteParams) (UsersIDDeleteRes, error)
	// UsersIDGet implements GET /users/{id} operation.
	//
	// Get user details by ID.
	//
	// GET /users/{id}
	UsersIDGet(ctx context.Context, params UsersIDGetParams) (UsersIDGetRes, error)
	// UsersPost implements POST /users operation.
	//
	// Register a new user.
	//
	// POST /users
	UsersPost(ctx context.Context, req *UsersPostReq) (UsersPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
