// Code generated by "enumer -type=TodoPriority -json -transform=upper -trimprefix=TodoPriority -output=priority_enum.go"; DO NOT EDIT.

package value

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TodoPriorityName = "LOWMEDIUMHIGH"

var _TodoPriorityIndex = [...]uint8{0, 3, 9, 13}

const _TodoPriorityLowerName = "lowmediumhigh"

func (i TodoPriority) String() string {
	if i < 0 || i >= TodoPriority(len(_TodoPriorityIndex)-1) {
		return fmt.Sprintf("TodoPriority(%d)", i)
	}
	return _TodoPriorityName[_TodoPriorityIndex[i]:_TodoPriorityIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TodoPriorityNoOp() {
	var x [1]struct{}
	_ = x[LOW-(0)]
	_ = x[MEDIUM-(1)]
	_ = x[HIGH-(2)]
}

var _TodoPriorityValues = []TodoPriority{LOW, MEDIUM, HIGH}

var _TodoPriorityNameToValueMap = map[string]TodoPriority{
	_TodoPriorityName[0:3]:       LOW,
	_TodoPriorityLowerName[0:3]:  LOW,
	_TodoPriorityName[3:9]:       MEDIUM,
	_TodoPriorityLowerName[3:9]:  MEDIUM,
	_TodoPriorityName[9:13]:      HIGH,
	_TodoPriorityLowerName[9:13]: HIGH,
}

var _TodoPriorityNames = []string{
	_TodoPriorityName[0:3],
	_TodoPriorityName[3:9],
	_TodoPriorityName[9:13],
}

// TodoPriorityString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TodoPriorityString(s string) (TodoPriority, error) {
	if val, ok := _TodoPriorityNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TodoPriorityNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TodoPriority values", s)
}

// TodoPriorityValues returns all values of the enum
func TodoPriorityValues() []TodoPriority {
	return _TodoPriorityValues
}

// TodoPriorityStrings returns a slice of all String values of the enum
func TodoPriorityStrings() []string {
	strs := make([]string, len(_TodoPriorityNames))
	copy(strs, _TodoPriorityNames)
	return strs
}

// IsATodoPriority returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TodoPriority) IsATodoPriority() bool {
	for _, v := range _TodoPriorityValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TodoPriority
func (i TodoPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TodoPriority
func (i *TodoPriority) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TodoPriority should be a string, got %s", data)
	}

	var err error
	*i, err = TodoPriorityString(s)
	return err
}
