// Code generated by "enumer -type=TodoStatus -json -transform=upper -trimprefix=TodoStatus -output=status_enum.go"; DO NOT EDIT.

package value

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TodoStatusName = "UNFINISHEDCOMPLETEDUNDEFINED"

var _TodoStatusIndex = [...]uint8{0, 10, 19, 28}

const _TodoStatusLowerName = "unfinishedcompletedundefined"

func (i TodoStatus) String() string {
	if i < 0 || i >= TodoStatus(len(_TodoStatusIndex)-1) {
		return fmt.Sprintf("TodoStatus(%d)", i)
	}
	return _TodoStatusName[_TodoStatusIndex[i]:_TodoStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TodoStatusNoOp() {
	var x [1]struct{}
	_ = x[UNFINISHED-(0)]
	_ = x[COMPLETED-(1)]
	_ = x[UNDEFINED-(2)]
}

var _TodoStatusValues = []TodoStatus{UNFINISHED, COMPLETED, UNDEFINED}

var _TodoStatusNameToValueMap = map[string]TodoStatus{
	_TodoStatusName[0:10]:       UNFINISHED,
	_TodoStatusLowerName[0:10]:  UNFINISHED,
	_TodoStatusName[10:19]:      COMPLETED,
	_TodoStatusLowerName[10:19]: COMPLETED,
	_TodoStatusName[19:28]:      UNDEFINED,
	_TodoStatusLowerName[19:28]: UNDEFINED,
}

var _TodoStatusNames = []string{
	_TodoStatusName[0:10],
	_TodoStatusName[10:19],
	_TodoStatusName[19:28],
}

// TodoStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TodoStatusString(s string) (TodoStatus, error) {
	if val, ok := _TodoStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TodoStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TodoStatus values", s)
}

// TodoStatusValues returns all values of the enum
func TodoStatusValues() []TodoStatus {
	return _TodoStatusValues
}

// TodoStatusStrings returns a slice of all String values of the enum
func TodoStatusStrings() []string {
	strs := make([]string, len(_TodoStatusNames))
	copy(strs, _TodoStatusNames)
	return strs
}

// IsATodoStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TodoStatus) IsATodoStatus() bool {
	for _, v := range _TodoStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TodoStatus
func (i TodoStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TodoStatus
func (i *TodoStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TodoStatus should be a string, got %s", data)
	}

	var err error
	*i, err = TodoStatusString(s)
	return err
}
